
;; =================================================================
;; FUNCTION FOR PERSPECTIVE (RESIGNATION)
;; =================================================================


;for the resignation extention du modéle question 2.1
to optimized_resign
  if (haveJob)[
    let resign? (similarity_person_to_company self employer) + (productivity [skills] of employer skills ); the hapiness of agent PERSON 
    if (resign? < unexpected_resignation_) ; unexpected_resignation_   represent the threshold of hapiness that can be modify by the interface . 
    [
      quit
    ]
  ]
end

to quit

  let me self
  if (haveJob)[ ask employer [fire_employee me] ]

end


;; =================================================================
;; OPTIMIZED_MATCHING
;; =================================================================

; calcul la similarité entre les skills
to-report optimized_skillSimilarity [skills1 skills2]
  let accu 0
  foreach (n-values n_skills [ n -> n ]) [x ->
   let skill_of_1 (array:item skills1 x) 
   let skill_of_2 (array:item skills2 x)
   if (skill_of_1 = skill_of_2) [
    set accu (accu + 1)  ; regarde si les skill demandé sont les même , si oui , +1
   ]
  ]  
  report (accu / n_skills)
end 

; calcul la similarité de distance (distance euclidienne)
to-report optimized_localisationSimilarity [x1 y1 x2 y2]
  let dist sqrt ((x1 - x2) ^ 2 + (y1 - y2) ^ 2)
  report   1. - dist / distMax
end

; calcul la similarité des salaire
to-report optimized_salarySimilarity [salary1 salary2]
  let diff (salary1 - salary2)
  let temp (1. + diff / salaryMax)
  report  (temp / 2)
end

; calcul la similarité d'une personne pour une personne
to-report optimized_similarity_person_to_company[a_person a_company]
  let accu 0
  set accu (accu + (skillSimilarity ([skills] of a_person) ([skills] of a_company))  * weight_skill_person_) ; ajout de poid;
  set accu (accu + (localisationSimilarity ([xcor] of a_person) ([ycor] of a_person) ([xcor] of a_company) ([ycor] of a_company)) * weight_distance_person_) ; ajout de poid
  set accu (accu + (salarySimilarity ([salary] of a_person) ([salary] of a_company))   * weight_salary_person_); ajout de poid
  let motivation (random-float unexpected_worker_motivation)
  report ( utility_function ((accu + motivation) / (weight_skill_person_ + weight_distance_person_ + weight_salary_person_ + unexpected_worker_motivation) ))
end

; calcul la similarité pour une comagnie
to-report optimized_similarity_company_to_person[a_company a_person]
  let accu 0
  set accu (accu + (skillSimilarity ([skills] of a_person) ([skills] of a_company)) * weight_skill_companies_ ); ajout de poid
  set accu (accu + (localisationSimilarity ([xcor] of a_person) ([ycor] of a_person) ([xcor] of a_company) ([ycor] of a_company)) * weight_distance_companies_) ; ajout de poid
  set accu (accu + (salarySimilarity ([salary] of a_company) ([salary] of a_person)) * weight_salary_companies_ ); ajout de poid
  let motivation (random-float unexpected_company_motivation)
  report ( utility_function ((accu + motivation) / (( weight_skill_companies_ + weight_distance_companies_ + weight_salary_companies_ ) + unexpected_company_motivation) ) )
end



to-report utility_function [number]
  report 1 / (1 + e ^ (10 * (0.5 - number)))
end



;; =================================================================
;; FUNCTION FOR PERSPECTIVE (RECONVERSION)
;; =================================================================


to update_skill [a_person number_skills value]
  ask a_person [ 
    array:set skills number_skills (value)
  ]
end



; is asking to a  COMPANY , he will may change his competences
to reconversion_company 
  foreach (n-values n_skills [ n -> n ]) [x ->
    let skill (array:item skills x)
    let rand random-float 1
    if (rand < reconvertion_company_rate_) [
      update_skill self x (1 - skill)
    ]
  ]
end 


; is asking to a PERSONS or a COMPANY , he will may change his competences
to reconversion_person 

  foreach (n-values n_skills [ n -> n ]) [x ->
    let skill (array:item skills x)
    let rand random-float 1
    if (rand < reconvertion_person_rate_) [
      update_skill self x (1 - skill)
    ]
  ]
end 
  


